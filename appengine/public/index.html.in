<!doctype html>
<html> 
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=700">
<link rel="stylesheet" href="tailwind.css">
<style>
:root {
	/* font:medium sans-serif;
	background:#222;
	color:#DDD; */
}
voting-choice {
	/* display:inline-block; */
}
a {
	/* text-decoration:underline;
	color:inherit; */
}
img[onclick]:active {
	/* opacity:.8; */
}
@media screen and (max-width:1200px) {
	img {
		/* zoom:.7; */
	}
}
@media screen and (max-width:900px) {
	img {
		/* zoom:.5; */
	}
}
</style>

<script src="https://cdn.jsdelivr.net/npm/@web3auth/core@0.6.1/dist/core.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter@0.6.2/dist/openloginAdapter.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/9.6.8/firebase-app-compat.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/9.6.8/firebase-auth-compat.min.js"></script>
<script src="./config.js"></script>
<script src="./web3auth.js"></script>


<!-- Google Analytics -->
<script>
ga = new Function;
document.write(`<script async src="https://www.googletagmanager.com/gtag/js?id=___GTAG_ID___"><${''}/script>`); // G-8GRHPC4MFV
window.dataLayer = window.dataLayer || [];
gtag = function () {
	dataLayer.push(arguments);
}
gtag('js',new Date());
gtag('config','___GTAG_ID___');
</script>
<!-- End Google Analytics -->

<!-- Web3 -->
<script src="https://unpkg.com/web3@1.7.0/dist/web3.min.js"></script>
<script>
dbgwalk = ttl => document.title = ttl;

// Contract Definitions...
const required_chain = 137;
const contract_address = '___CONTRACT_ADDRESS___';
const token_address = '___TOKEN_ADDRESS___';
const rarible_url_extras = {
	 137: 'polygon/'
	,1337: 'polygon/'
}

const last_token = 1024;
const abi = [
	{
		"anonymous": false,
		"inputs":
		[
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "token_contract",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "observe",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs":
		[
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "token_contract",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "voteFor",
		"type": "event"
	},
	{
		"inputs":
		[
			{
				"internalType": "address",
				"name": "token_contract",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "first",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "last",
				"type": "uint256"
			}
		],
		"name": "getStats",
		"outputs":
		[
			{
				"components":
				[
					{
						"internalType": "uint256",
						"name": "observations",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "hits",
						"type": "uint256"
					}
				],
				"internalType": "struct Votes.Stats[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs":
		[
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "itemStats",
		"outputs":
		[
			{
				"internalType": "uint256",
				"name": "observations",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "hits",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs":
		[
			{
				"internalType": "address",
				"name": "token_contract",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tkid_for",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "tkid_against",
				"type": "uint256"
			}
		],
		"name": "vote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

const token_skips = {};

// Utils
function safehtml (html,...ins) {
	return html.map((tk,ii) => {
		if (ii === 0) {
			return tk;
		}
		return String(ins[ii - 1])
			.replace(/&/g,'&amp;')
			.replace(/</g,'&lt;')
			.replace(/'/g,'&apos;')
			.replace(/"/g,'&quot;')
			+tk
		;
	}).join('');
}
function xssSafeguard(token) {
	if (/['"\\]/.test(token)) {
		throw new Error(`Guarded against string: ${ token }`)
	}
	return token;
}
function rarible_url(tokenId) {
	if (typeof tokenId != 'number') throw new TypeError;
	return `https://rarible.com/token/${ (rarible_url_extras[required_chain] || '') }${ token_address }:${ tokenId }`;
}

// State Manager
const
	 WEB3_UNKOWN = 0
	,WEB3_BROKEN = 1
	,WEB3_NOT_INSTALLED = 2
	,WEB3_STANDBY = 3
	,WEB3_CONNECTED = 4
	//
	,STR_PREV_WALLET_CONNECTED = 'prev-wallet-C0ABD0F0'
;
web3 = null;
AppActual = new class { // Note: this is messy; would prefer custom elements, possibly with templates and slots.
	constructor () {
		//
		// Optimisation..
		this.repaint = this.repaint.bind(this);
		//
		// State and events..
		this.web3_state = WEB3_UNKOWN;
		this.contract = null;
		this.user_wallet = null;
		addEventListener('DOMContentLoaded',this.startup.bind(this));
	}
	//
	// Startup
	async startup () {

		this.domStartup();
		this.el_loader.hidden = false;

		const web3completion = this.web3Startup();
		setTimeout(async ()=>{
			await this.web3AuthStartup();
		})
		//
		this.freshChoices();
		this.repaint();
		await web3completion;
		this.web3EventWatch();
		this.freshScoreBoard();
		//
		this.repaint();

		this.el_loader.hidden = true;

	}


	domStartup () {
		this.el_status = document.querySelector('#status-actual');
		this.el_voting = document.querySelector('#choices-actual');
		this.el_scores = document.querySelector('#score-board-actual');
		this.el_loader = document.querySelector('#loader-overlay');
		this.el_debug = document.querySelector('#debug-actual');
	}
	async web3Startup () {
		const url = new URL(window.location.href);
		if (url.searchParams.has("error")) {
			alert("Error while login " + url.searchParams.get("error"));
		}
		//dbgwalk("huh?")
		this.repaintSoon();
		//
		//dbgwalk("What")
		if(typeof(ethereum) === "undefined") {
			this.web3_state = WEB3_NOT_INSTALLED;
			console.warn("Metamask is not installed");
			return;
		}
		//dbgwalk("90")
		web3 = new Web3(ethereum); // global
		this.web3_state = WEB3_STANDBY; // fallback state.
		try {
			//dbgwalk(1)
			await this.web3UpdateNetwork();
			//dbgwalk(2)
			if (localStorage[STR_PREV_WALLET_CONNECTED]) { // this can throw in some private-mode browsers
				let acc = await web3.eth.getAccounts(); // Fails if the user hasn't PREVIOUSLY connected. Might throw; not sure.
				if (acc[0]) {
					this.user_wallet = acc[0];
					this.web3_state = WEB3_CONNECTED;
				}
			}
			//dbgwalk(3)
		}
		catch (ee) {
			// Ignore
		}
		//
		//dbgwalk(4)
		this.contract = new web3.eth.Contract(abi,contract_address); 
		//dbgwalk(5)
		//
		this.repaintSoon(); // since we probably paused for async stuff
	}

	async web3AuthStartup() {
		const onLoginCallback = async (web3AuthInstance) => {
			const wallets = await web3AuthInstance.provider.request({ method: 'eth_accounts' });
			this.user_wallet = wallets[0];
			this.web3_state = WEB3_CONNECTED;
			web3 = new Web3(web3AuthInstance.provider);
			this.contract = new web3.eth.Contract(abi,contract_address); 
			// web3auth internally make sure that user is connected to right network
			this.web3_rightNetwork = true
			this.freshScoreBoard();
			this.repaint();
		}

		const _subscribeAuthEvents = (web3AuthInstance) => {
			web3AuthInstance.on("connected", async (data) => {
				await onLoginCallback(web3AuthInstance);
			});

			web3AuthInstance.on("connecting", () => {
				console.log("connecting with web3auth");
			});

			web3AuthInstance.on("disconnected", () => {
				console.log("disconnected");
			});

			web3AuthInstance.on("errored", (error) => {
				console.log("some error or user have cancelled login request", error);
			});
		}
	
		await window.Web3Auth.init();
		const web3AuthInstance = window.Web3Auth.getWeb3AuthInstance();
		_subscribeAuthEvents(web3AuthInstance)
		// user is logged in.
		if (web3AuthInstance.provider) {
			await onLoginCallback(web3AuthInstance)
		}

		// this.el_loader.hidden = false;
		// firebase.auth().getRedirectResult()
		// 	.then(window.Web3Auth.handleFirebaseRedirect)
		// 	.catch(error => console.error(error))
		// 	.finally(() => this.el_loader.hidden = true;)
	}

	web3EventWatch () {
		if (this.web3_watch_active) return;
		//
		switch (this.web3_state) {
			case WEB3_UNKOWN:
			case WEB3_BROKEN:
			case WEB3_NOT_INSTALLED:
				break;
			default:
				try {
					//dbgwalk(9)
					ethereum.on('networkChanged',async chainId => {
						//dbgwalk(10)
						await this.web3UpdateNetwork(chainId);
						this.repaintSoon();
						this.freshScoreBoard();
					})
					//dbgwalk(8)
				}
				catch (ee) {
					// Don't know why this would throw, but until I do know, I'm being paranoid.
					console.warn("EventWatch throw:",ee);
				}
		}
	}
	//
	// Util
	async web3UpdateNetwork (chainId) {
		let chid = Number(chainId);
		if (!chid) {
			try {
				chid = Number(await ethereum.request({ method:'eth_chainId' }));
			}
			catch (ee) {
				chid = NaN;
			}
		}
		//
		//let nni = 0
		//let dbf = () => this.el_debug.textContent = safehtml`${ ++nni }. ${chid} (${ typeof chid }) /  ${chainId} (${ typeof chainId }) / ${ ethereum.chainId } (${ typeof ethereum.chainId })`
		//dbf()
		//setTimeout(dbf,1000)
		//setTimeout(dbf,5000)
		//

		if (Number.isNaN(chid)) {
			this.web3_rightNetwork = undefined;
		}
		else {
			this.web3_rightNetwork = chid == required_chain;
		}
	}
	//
	// Display
	repaintSoon () {
		queueMicrotask(this.repaint);
	}
	repaint () {
		console.log("Repaint",this.web3_state);

		switch (this.web3_state) {
			case WEB3_UNKOWN:
				this.el_status.innerHTML = safehtml``;
				break;
			case WEB3_BROKEN: // Not in use.
				this.el_status.innerHTML = safehtml`
					There was a problem with the wallet connection. Please <a href="">Reload</a> to retry.
				`;
				break;
			case WEB3_NOT_INSTALLED:
				this.el_status.innerHTML = safehtml`
					<div>To vote on-chain:</div>
					<input type="button" value="Connect with Google&times;Firebase (Web3Auth)" onclick="AppActual.userWeb3AuthConnect()">
					or
					<input type="button" value="Install MetaMask" onclick="AppActual.userGetMetaMask()">
				`;
				break;
			case WEB3_STANDBY:
			case WEB3_CONNECTED:
				if (this.web3_rightNetwork === false) {
					this.el_status.innerHTML = safehtml`
						<span>Record your vote on-chain by switching your Metamask wallet to the Polygon network. 
						<a class="underline" href="https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/" target="polygon">Learn how</a>.
						</span>
						<p>or</p>
						<input type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" value="Connect with Google&times;Firebase (Web3Auth)" onclick="AppActual.userWeb3AuthConnect()">
					`;
					break;
				}
				switch (this.web3_state) {
					case WEB3_STANDBY:
						this.el_status.innerHTML = safehtml`
							<div><p>To record your vote on-chain:</p>
							<input class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button" value="Connect with Google&times;Firebase (Web3Auth)" onclick="AppActual.userWeb3AuthConnect()">
							<p>or</p>
							<input type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" value="Connect with Metamask" onclick="AppActual.userWalletConnect()">
						`
						// prev: safehtml`<input type="button" value="Connect With Metamask" onclick="AppActual.userWalletConnect()"> to record your vote on-chain!`;
						break;
					case WEB3_CONNECTED:
						this.el_status.innerHTML = safehtml`
							Wallet <span style="font:smaller monospace">${ this.user_wallet }</span> connected via Polygon. <a class="underline" style="cursor:pointer" onclick="AppActual.userWalletDisconnect()">Disconnect</a>.
						`;
						break;
					default:
						throw Unreachable1;
				}
				break;
			default:
				throw Unreachable2;
		}
	}

	async userWeb3AuthConnect () {
		window.location.href = "/auth.html"
	}
	//
	// Interaction
	async userWalletConnect () {
		console.log("window.web3auth", window.Web3Auth);
		const wallets = await ethereum.request({ method: 'eth_requestAccounts' });
		//
		this.repaintSoon();
		//
		if (!wallets[0]) {
			console.warn("User shared 0 wallet addresses.");
			this.user_wallet = null;
			this.web3_state = WEB3_STANDBY;
		}
		else {
			this.user_wallet = wallets[0];
			this.web3_state = WEB3_CONNECTED;
			try {
				localStorage[STR_PREV_WALLET_CONNECTED] = true; // actually stores it as a string, but it's fine.
			}
			catch (ee) {
				// Probably a private browsing error; Ignore 
			}
			gtag('event','login',{ method: 'web3' });
		}
		//
		await this.web3UpdateNetwork();
		this.repaintSoon();
		//
		this.freshScoreBoard();
	}
	async userWalletDisconnect () {
		if (window.Web3Auth.isConnected()) {
			await window.Web3Auth.disconnect()
		}
		this.repaintSoon()
		//
		this.web3_state = typeof(ethereum) !== "undefined" ? WEB3_STANDBY : WEB3_NOT_INSTALLED;
		this.user_wallet = null;
		//
		try {
			delete localStorage[STR_PREV_WALLET_CONNECTED];
		}
		catch (ee) {
			// Probably a private browsing error; Ignore 
		}
	}
	async userVote (vote_for,vote_against) {
		if (this.web3_state == WEB3_CONNECTED && this.web3_rightNetwork === false) { // For somebody trying to vote even while it says "Switch Networks" at the top
			alert("Please ensure your wallet is connected to the Polygon network.");
			return;
		}
		//
		vote_for = Number(vote_for);
		vote_against = Number(vote_against);
		// Being over-cautious while debugging:
		if (!vote_for) throw new SyntaxError;
		if (!vote_against) throw new SyntaxError;
		//
		//alert(`Dispatching vote for #${ vote_for } and against #${ vote_against }`);
		//
		// GA Votes:
		gtag('event','vote_hit',{ wallet: this.user_wallet || "none", tokenId:vote_for });
		gtag('event','vote_observe',{ wallet: this.user_wallet || "none", tokenId:vote_for });
		gtag('event','vote_observe',{ wallet: this.user_wallet || "none", tokenId:vote_against });
		gtag('event','select_item',{
			//this.user_wallet || "[no wallet]",vote_against
			 item_list_id: contract_address
			,item_list_name: `votes:${contract_address}`
			,items: [{
				 item_id: vote_against
				,index: Number(vote_against)
				,quantity: -1
				,affiliation: (this.user_wallet || "[no wallet]").toLowerCase()
			}]
		});
		gtag('event','select_item',{
			//this.user_wallet || "[no wallet]",vote_for
			 item_list_id: contract_address
			,item_list_name: `votes:${contract_address}`
			,items: [{
				 item_id: vote_for
				,index: Number(vote_for)
				,quantity: 1
				,affiliation: (this.user_wallet || "[no wallet]").toLowerCase()
			}]
		});
		//
		// Chain votes, if applicable:
		switch (this.web3_state) {
			case WEB3_CONNECTED:
				try {
					this.el_loader.hidden = false;

					let result = await this.contract.methods.vote(token_address,vote_for,vote_against).send({
						gasPrice: Web3.utils.toWei("200", "Gwei")
						,from: this.user_wallet
					});
					console.log("txhash: ", result.transactionHash);
					//alert(`Transaction sent to blockchain. Transaction hash is: ${result.transactionHash}`);
					this.freshChoices()
				}
				catch (ee) {
					console.error("Transaction report:",ee);
					let err_silence = false;
					let err_display;
					try {
						if (/Error: \{/.test(ee.message)) {
							let details = JSON.parse(ee.message.substr('Error: '.length));
							err_display = details.data.message;
						}
						if (/MetaMask.*User\sdenied/i.test(ee.message)) {
							err_silence = true;
							queueMicrotask(() => this.freshChoices()); // load fresh choices after rejection
						}
					}
					catch (ee_parse) {}
					if (err_display) {
						alert(`There was an error while sending transaction:\n${ err_display }`);
					}
					else if (!err_silence) {
						alert("There was a problem while sending transaction.");
					}
				}
				finally {
					this.el_loader.hidden = true;
				}
				break;
			default:
				console.log("No chain voting required in current config.");
				this.freshChoices();
				break;
		}
	}
	userGetMetaMask () {
		const mmurl = 'https://metamask.io/download/';
		try {
			open(mmurl);
		}
		catch (ee) {
			console.log("MM button fallback:",ee);
			location.href = this.getAttribute('href');
		}
	}
	//
	// Non-user-initiated UI
	async freshChoices() {
		function measure ({observations,hits}) {
			return (hits/(observations+0.0)) || 0;
		}
		//
		let all_choices = [];
		for (let ii = 1; ii <= last_token; ii++) {
			if (ii in token_skips) continue;
			all_choices.push(ii);
		}
		let selectRandomCompetitors = (how_many,full_set) => { // TODO use the leaderboard dataset instead, IF it has been loaded
			if (!(how_many > 0)) throw new Error("Check range.");
			if (how_many > full_set.length) throw new Error("Check set.");
			//
			let copy = full_set.slice(0);
			let answer = [];
			for (let ii = 0; ii < how_many; ii++) {
				const rnd_index = Math.random() * copy.length;
				answer.push(copy.splice(rnd_index,1)[0]);
			}
			return answer;
		}
		let selectMatchedCompetitors = async (how_many,full_set) => {
			if (!(how_many > 0)) throw new Error("Check range.");
			if (how_many > full_set.length) throw new Error("Check set.");
			let ranked = await this.contract.methods.getStats().call();
			ranked = ranked.map(([observations,hits],ii) => {  // argument order: 36BFA4FB-2115-4D02-82FD-239E613D7557
				return {
					 tokenId: ii + 1
					,observations
					,hits
				}
			});
			ranked.sort((aa,bb) => measure(bb) - measure(aa)); // sort by popularity - LATER store these for better side-by-side voting
			//
			const rnd_index = Math.random() * ranked.length;
			compA = ranked[rnd_index][0];
			compB = 0;
			if (rnd_index == 0) {
				compB = ranked[rnd_index+1][0];
			}
			else {
				compB = ranked[rnd_index-1][0];
			}
			let answer = [compA, compB];
			return answer;
		}
		var competitors;
		switch (this.web3_state) {
			case WEB3_STANDBY:
			case WEB3_CONNECTED:
				competitors = selectMatchedCompetitors(2,all_choices);
			case WEB3_NOT_INSTALLED:
			default:
				competitors = selectRandomCompetitors(2,all_choices);
		}
		document.querySelector('#choices-actual').innerHTML = safehtml`
			<div class="flex flex-row m-2">
				<voting-choice class="grow m-2" tokenId="${ competitors[0] }"></voting-choice>
				<voting-choice  class="grow m-2" tokenId="${ competitors[1] }"></voting-choice>
			</div>
		`
	}
	async freshScoreBoard () {
		function measure ({observations,hits}) {
			return (hits/(observations+0.0)) || 0;
		}
		//
		//console.log("eh?",this,this.web3_state);
		switch (this.web3_state) {
			case WEB3_STANDBY:
			case WEB3_CONNECTED:
				if (this.web3_rightNetwork === false) {
					this.el_scores.innerHTML = safehtml`<small>Switch networks to view.</small>`;
					break;
				}
				//else if (this.web3_rightNetwork === undefined) { // SOME MetaMask versions cause this state
				//	this.el_scores.innerHTML = safehtml`<small>Connect wallet to view.</small>`;
				//	break;
				//}
				//let result = await this.contract.methods.getStats().call();
				let result;
				let half_way = last_token >>> 1;
				// do 2 calls; 10,000 at once makes gas run out
				result = await this.contract.methods.getStats(token_address,0,half_way).call();
				result = result.concat(await this.contract.methods.getStats(token_address,half_way,last_token).call());
				result = result.map(([observations,hits],ii) => {  // argument order: 36BFA4FB-2115-4D02-82FD-239E613D7557
					return {
						 tokenId: ii + 1
						,observations
						,hits
					}
				});
				result.sort((aa,bb) => measure(bb) - measure(aa)); // sort by popularity - LATER store these for better side-by-side voting
				this.el_scores.innerHTML = result.slice(0,10).map(({tokenId,observations,hits},ii) => safehtml`
					<nobr>${ ii + 1 }. ${ tokenId } (${ hits } wins, ${ observations } matches) <a class="underline" target="rarible" onclick="
					gtag('event','conversion',{platform:'rarible',tokenId:'${ xssSafeguard(tokenId) }'});
				" href="${ rarible_url(tokenId) }"><nobr><img width="50px" src="___TOKEN_BUCKET_PREFIX___${ tokenId }.png"></a></nobr>
				`).join('<br>');
				console.log("Top 10 Peek",result.slice(0,10));
				break;
			case WEB3_NOT_INSTALLED:
				this.el_scores.innerHTML = safehtml`<small>Connect wallet to view.</small>`;
				break;
			default:
				this.el_scores.innerHTML = '...';
				break;
		}
	}
}

// Custom HTML Elements...
customElements.define('voting-choice',class extends HTMLElement {
	static get observedAttributes() {
		return ['tokenid']
	}
	attributeChangedCallback(name,prev,nu) {
		switch (name) {
			case 'tokenid':
				this.tokenId = Number(nu);
				if (!this.tokenId) {
					this.textContent = "[bad id]";
					return;
				}
				this.innerHTML = safehtml`
					<div class="p-6 flex flex-col bg-white bg-opacity-50 rounded-xl shadow-lg text-center">
					<img
						src="___TOKEN_BUCKET_PREFIX___${ this.tokenId }.png"
						alt="Token #${this.tokenId}"
						onclick="this.closest('voting-choice').onChoose()"
					>
					<input
						type="button"
						value="Vote for me"
						onclick="this.closest('voting-choice').onChoose()"
						class="m-1 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
					>
					<a class="underline"
						target="rarible" onclick="
						gtag('event','conversion',{platform:'rarible',tokenId:'${ this.tokenId }'});
						" href="${ rarible_url(this.tokenId) }">Buy on Rarible</a>
					</div>
				`
		}
	}
	onChoose() {
		//
		// Find all other voting-choice elements, excluding this one:
		let competing_choices = Array.from(document.querySelectorAll('voting-choice')).filter(el => el != this);
		if (competing_choices.length != 1) {
			throw new Error("We're expecting only one other choice to be present.");
		}
		AppActual.userVote(this.tokenId,competing_choices[0].tokenId);
	}
});
</script>


</head> 
<body class="h-max bg-gradient-to-b from-slate-200 to-slate-500">
<div class="text-center text-5xl font-bold text-gray-800 py-5 px-6">
	<p>
		Vote for your favorite!
	</p>
</div>
<div
	style="
		position:fixed;
		top:0;
		left:0;
		bottom:0;
		right:0;
		background:rgba(0,0,0,0.3);
		align-items:center;
		justify-content:center;
		z-index:1;
	"
	id="loader-overlay"
	hidden
>
	<div class="lds-ring"><div></div><div></div><div></div><div></div></div>
</div>

<div id="debug-actual"></div>

<div id="status-actual" class="p-3 m-4 bg-white bg-opacity-50 rounded-xl shadow-lg text-center"></div>

<div id="content" class="container max-w-none flex flex-row">
	<div class="" id="choices-actual"></div>
<!--
	<div class="basis-3/4" id="choices-actual"></div>
	<div class="basis-1/4 flex flex-col p-6 m-4 bg-slate-400 bg-opacity-50 rounded-xl shadow-lg" id="score-board">
		<p class="text-center text-2xl font-bold">Top 10</p>
		<div id="score-board-actual">...</div>
	</div>
-->
</div>
<div id="footer" class="text-center text-slate-600"><a class="underline" href="https://twitter.com/allenday">@allenday</a> - <a class="underline" href="https://twitter.com/dtedesco1">@dtedesco1</a> - <a class="underline" href="https://github.com/allenday/web3-analytics-demo">source code</a> - 2022</div>
</body>
<style>
	#loader-overlay:not([hidden]) {
		display:flex;
	}
	.lds-ring {
		display: inline-block;
		position: relative;
		width: 80px;
		height: 80px;
	}
	.lds-ring div {
		box-sizing: border-box;
		display: block;
		position: absolute;
		width: 64px;
		height: 64px;
		margin: 8px;
		border: 8px solid #fff;
		border-radius: 50%;
		animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
		border-color: #fff transparent transparent transparent;
	}
	.lds-ring div:nth-child(1) {
		animation-delay: -0.45s;
	}
	.lds-ring div:nth-child(2) {
		animation-delay: -0.3s;
	}
	.lds-ring div:nth-child(3) {
		animation-delay: -0.15s;
	}
	@keyframes lds-ring {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
</style>
</html>
